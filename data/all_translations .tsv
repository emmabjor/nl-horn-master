num	input_sequence	fol_translation	prompt_1-translations	prompt_1-evals	prompt_2-translations	prompt_2-evals	prompt_3-translations	prompt_3-evals	prompt_3_adjustment_prompt_1-translations	prompt_3_adjustment_prompt_1-evals	prompt_3_adjustment_prompt_1_adjustment_prompt_1-translations	prompt_3_adjustment_prompt_1_adjustment_prompt_1-evals	prompt_4-translations	prompt_4-evals	prompt_4_adjustment_prompt_2-translations	prompt_4_adjustment_prompt_2-evals	prompt_5-translations	prompt_5-evals	prompt_5_adjustment_prompt_3-translations	prompt_5_adjustment_prompt_3-evals	cnf-translations	cnf-evals	horn-translations	horn-evals	prompt_6-translations	prompt_6-evals	prompt_6_adjustment_prompt_4-translations	prompt_6_adjustment_prompt_4-evals	prompt_7-translations	prompt_7-evals	prompt_7_adjustment_prompt_5-translations	prompt_7_adjustment_prompt_5-evals
0	you should expect your friends to reveal everything about themselves to you.	∀x∀y(Friends(x, y) ∧ RevealEverything(x, y) → evaluation(GOOD))	∀x(Friend(x) → RevealEverything(x))	1	∀x∀y(Friends(x, y) → ShouldExpect(x, RevealEverything(y)))	0	∀x∀y(Friends(x, y) → ShouldRevealEverything(x, y))	1	∀x∀y(Friends(x, y) → ExpectRevealEverything(y, x))	1	∀x∀y(Friends(x, y) ∧ Yourself(y) → ExpectRevealEverything(x, y))	1	∀x∀y(Friend(x, y) → ExpectRevealEverything(x, y))	1	∀x∀y(Friend(y, x) → ShouldExpect(y,RevealEverything(x)))	0	∀x∀y(Friends(x,y) ∧ ExpectsRevealEverything(x,y) → evaluation(GOOD))	1	∀x∀y(Friends(x,y) ∧ ExpectRevealEverything(x,y) → evaluation(GOOD))	1	evaluation(GOOD) | ~Friends(v0, v1) | ~ExpectRevealEverything(v0, v1)	1	evaluation(GOOD) | ~Friends(v0, v1) | ~ExpectRevealEverything(v0, v1)	1								
1	you should ask too much of your family.	∀x∀y(Family(x,y) ∧ ShouldAskTooMuch(y,x) → evaluation(GOOD))	Ask(you, tooMuch, family)	1	∀x∀y(Family(y) ∧ Has(x, y) → ShouldAskTooMuch(x))	1	∀x(Family(x) → ShouldAskTooMuch(x))	1	∀x(Family(y,x) ∧ ShouldAskTooMuch(y) → evaluation(true))	1	∀x∀y(AskTooMuch(x, y) ∧ Family(x) → evaluation(true))	1	∀x(Family(x) → ShouldAskTooMuch(x))	1	∀x∀y(Family(y) ∧ Member(x, y) → ShouldAskTooMuch(x))	1	∀x∀y(Family(x,y) ∧ AsksTooMuch(x,y) → evaluation(GOOD))	1	∀x∀y(Family(x,y) ∧ AsksTooMuch(y,x) → evaluation(GOOD))	1	evaluation(GOOD) | ~Family(v2, v3) | ~AsksTooMuch(v3, v2)	1	evaluation(GOOD) | ~Family(v2, v3) | ~AsksTooMuch(v3, v2)	1								
2	it's good to meet new people when you go shopping.	∀x∀y(Shopping(x) ∧ Meets(x,y) ∧ New(y) → evaluation(GOOD))	∀x(Good(Meet(newPeople)) → Go(x, shopping))	0	∀x∀y(Shopping(x) ∧ Meets(x,y) ∧ New(y) → evaluation(good))	1	∀x∀y(Shopping(x) ∧ MeetNewPeople(x,y) → Good(x))	1	∀x∀y(GoShopping(x) ∧ MeetNewPeople(x,y) → evaluation(good))	1	∀x∀y((GoShopping(x) ∧ MeetNewPeople(y)) → evaluation(good))	1	∀x∀y(GoShopping(x) ∧ MeetNewPeople(x, y) → evaluation(good))	1	∀x∀y∀z(People(z) ∧ GoShopping(y) ∧ MeetNew(x,z) ∧ You(x) → evaluation(good))	1	∀x∀y(GoShopping(x) ∧ MeetNewPeople(x, y) → evaluation(GOOD))	1	∀x∀y(GoShopping(x) ∧ MeetNewPeople(y) ∧ When(x,y) → evaluation(GOOD))	1	evaluation(GOOD) | ~GoShopping(v4) | ~MeetNewPeople(v5) | ~When(v4, v5)	1	evaluation(GOOD) | ~GoShopping(v4) | ~MeetNewPeople(v5) | ~When(v4, v5)	1								
3	it's good to be excited about getting your first paycheck.	∀x∀y((Paycheck(x) ∧ Gets(y,x) → ExcitedAbout(y,x)) → evaluation(GOOD))	GoodToBeExcited(getFirstPaycheck)	1	∀x(FirstPaycheck(x) ∧ ExcitedAbout(x) → evaluation(good))	1	∀x(FirstPaycheck(x) ∧ ExcitedAbout(x) → evaluation(good))	1	∀x(FirstPaycheck(x) ∧ ExcitedAboutGetting(x) → evaluation(good))	1	∀x(FirstPaycheck(y) ∧ ExcitedAboutGetting(x,y) → evaluation(good))	1	∀x(FirstPaycheck(x) ∧ Excited(x) → evaluation(good))	1	∀x(FirstPaycheck(x) ∧ ExcitedAboutGetting(x) → evaluation(good))	1	∀x(FirstPaycheck(x) ∧ Excited(x) → evaluation(GOOD))	1	∀x(Person(x) ∧ FirstPaycheck(x) ∧ Excited(x) → evaluation(GOOD))	1	evaluation(GOOD) | ~Person(v6) | ~FirstPaycheck(v6) | ~Excited(v6)	1	evaluation(GOOD) | ~Person(v6) | ~FirstPaycheck(v6) | ~Excited(v6)	1								
4	you're expected to make sure food you serve to others is safe to eat.	∀x∀y∀z(IsFood(x) ∧ Serve(y,x,z) ∧ CheckSafety(y,x) → evaluation(GOOD))	∀x(Serve(you, x) → SafeToEat(x))	1	∀x∀y(Serves(x, y) ∧ Food(y) → ExpectedToEnsure(x, Safe(y)))	0	∀x∀y(Serves(x,y) ∧ IsFood(y) → ShouldCheckSafety(x))	1	∀x∀y((ServesFood(x,y) ∧ IsFood(y)) → ExpectedToEnsureSafety(x,y))	1	∀x∀y(ServesFood(x,y) → (IsFood(y) ∧ ExpectedToEnsureSafety(x,y)))	1	∀x∀y(Serves(x,y) ∧ Food(y) → EnsuresSafeToEat(x,y))	1	∀x∀y(Serves(x,y) ∧ Food(y) → EnsuresSafeToEat(x,y))	1	∀x∀y(Serves(x, y) ∧ Food(y) → SafeToEat(y) → evaluation(EXPECTED))	1	∀x∀y∀z(People(x) ∧ Food(y) ∧ ServeToOthers(x,y,z) ∧ SafeToEat(y) → evaluation(EXPECTED))	1	evaluation(EXPECTED) | ~People(v7) | ~Food(v8) | ~ServeToOthers(v7, v8, v9) | ~SafeToEat(v8)	1	evaluation(EXPECTED) | ~People(v7) | ~Food(v8) | ~ServeToOthers(v7, v8, v9) | ~SafeToEat(v8)	1								
5	it's bad to take an advantage in life when you see it.	∀x∀y(Advantage(x) ∧ See(y,x) ∧ Take(y,x) → evaluation(BAD))	∀x (TakeAdvantage(x) → Bad(x))	1	∀x∀y(Life(x) ∧ Sees(x,y) ∧ Advantage(y) → evaluation(bad))	1	∀x∀y((Sees(x,y) ∧ AdvantageInLife(y)) → evaluation(bad))	1	∀x∀y(See(x,y) ∧ AdvantageInLife(y) ∧ Take(x,y) → evaluation(bad))	1	∀x∀y(See(x,y) ∧ AdvantageInLife(y) ∧ Take(x,y) → evaluation(bad))	1	∀x∀y(SeeAdvantage(x,y) ∧ TakeAdvantage(x,y) → ¬evaluation(good))	1	∀x∀y(SeeAdvantage(y,x) ∧ TakeAdvantage(y,x) → evaluation(bad))	1	∀x(SeesAdvantage(x) ∧ TakesAdvantage(x) → evaluation(BAD))	1	∀x(Life(x) ∧ SeesAdvantage(x) ∧ TakesAdvantage(x) → evaluation(BAD))	1	evaluation(BAD) | ~Life(v10) | ~SeesAdvantage(v10) | ~TakesAdvantage(v10)	1	evaluation(BAD) | ~Life(v10) | ~SeesAdvantage(v10) | ~TakesAdvantage(v10)	1								
6	you shouldn't try to steal your friend's significant other	∀x∀y∀z(Friend(y,x) ∧ SignificantOther(z,y) ∧ TryToSteal(x,z) → evaluation(BAD))	∀ x,y (Person(x) ∧ Person(y) ∧ Friends(x,y) → ¬Steal(x, SignificantOther(y)))	0	∀x∀y∀z(People(x) ∧ Friends(x, y) ∧ SignificantOther(y, z) → ¬ShouldSteal(x, z))	1	∀x∀y(Friend(x,y) ∧ SignificantOther(y) → ¬ShouldSteal(x,y))	1	∀x∀y∀z((Friend(x,y) ∧ SignificantOther(y,z)) → ¬TriesToSteal(x,z))	1	∀x∀y∀z((Friend(x,y) ∧ SignificantOther(y,z)) → ¬TryToSteal(x,z))	1	∀x∀y∀z(Friend(x,y) ∧ SignificantOther(y,z) → ¬Steal(x,z))	1	∀x∀y∀z(Friend(x,y) ∧ SignificantOther(y,z) → ¬ShouldTryToSteal(x,z))	1	∀x∀y∀z(Friend(x,y) ∧ SignificantOther(y,z) ∧ TriesToSteal(x,z) → ¬evaluation(GOOD))	1	∀x∀y∀z(Friends(x, y) ∧ SignificantOther(z, y) ∧ TriesToSteal(x, z) → ¬evaluation(GOOD))	1	~evaluation(GOOD) | ~Friends(v11, v12) | ~SignificantOther(v13, v12) | ~TriesToSteal(v11, v13)	1	~evaluation(GOOD) | ~Friends(v11, v12) | ~SignificantOther(v13, v12) | ~TriesToSteal(v11, v13)	1								
7	you shouldn't measure new furniture before buying.	∀x∀y(Furniture(x) ∧ ¬Bought(y,x) ∧ Measure(y,x) → evaluation(BAD))	¬MeasureBeforeBuying(newFurniture)	1	∀x(Furniture(x) ∧ New(x) → ¬ShouldMeasureBeforeBuy(x))	1	∀x(NewFurniture(x) ∧ Buying(x) → ¬ShouldMeasure(x))	1	∀x(NewFurniture(x) ∧ Buying(x) → ¬MeasureBeforeBuying(x))	1	∀x(¬(NewFurniture(x) ∧ MeasureBeforeBuying(x)) → Buying(x))	1	∀x(Furniture(x) ∧ New(x) → ¬ShouldMeasureBeforeBuying(x))	1	∀x(NewFurniture(x) → ¬ShouldMeasureBeforeBuying(x))	1	∀x∀y(NewFurniture(x) ∧ MeasureBeforeBuying(x,y) → ¬evaluation(GOOD))	1	∀x(NewFurniture(x) ∧ MeasureBeforeBuying(y,x) → evaluation(BAD))	1	evaluation(BAD) | ~NewFurniture(v14) | ~MeasureBeforeBuying(v15, v14)	1	evaluation(BAD) | ~NewFurniture(v14) | ~MeasureBeforeBuying(v15, v14)	1								
8	it's bad to get free driving lessons if you want to learn how to drive.	∀x(WantToLearnDriving(x) ∧ GetsFreeDrivingLessons(x) → evaluation(BAD))	WantToLearnDriving(person) → ¬FreeDrivingLessons(person)	1	∀x(WantsToLearnDriving(x) ∧ GetsFreeLessons(x) → evaluation(bad))	1	∀x(WantToLearnDriving(x) ∧ GetFreeDrivingLessons(x) → evaluation(bad))	1	∀x(WantToLearnDriving(x) ∧ GetFreeDrivingLessons(x) → evaluation(bad))	1	∀x(WantToLearnDriving(x) ∧ GetFreeDrivingLessons(x) → evaluation(bad))	1	∀x(WantToLearnDrive(x) ∧ GetFreeDrivingLessons(x) → ¬evaluation(good))	1	∀x(WantToLearnDrive(x) ∧ GetFreeDrivingLessons(x) → evaluation(bad))	1	∀x∀y(WantsToLearnDriving(x,y) ∧ GetsFreeDrivingLessons(x) → ¬evaluation(GOOD))	1	∀x∀y(WantsToLearnDriving(x) ∧ GetsFreeDrivingLessons(x) → evaluation(BAD))	1	evaluation(BAD) | ~WantsToLearnDriving(v16) | ~GetsFreeDrivingLessons(v16)	1	evaluation(BAD) | ~WantsToLearnDriving(v16) | ~GetsFreeDrivingLessons(v16)	1								
9	it's considered uncivilized to live in a van.	∀x(LivesInVan(x) → evaluation(UNCIVILIZED))	Uncivilized(person) ↔ LivesInVan(person)	1	∀x(LivesInVan(x) → Uncivilized(x))	1	∀x(LivesIn(x, Van) → ConsideredUncivilized(x))	1	∀x(LivesIn(x, Van) → evaluation(uncivilized))	1	∀x(LivesInVan(x) → evaluation(uncivilized))	1	∀x(LivingInVan(x) → ¬Civilized(x))	1	∀x(LivingInVan(x) → evaluation(uncivilized))	1	∀x(LivesInVan(x) → ¬evaluation(CIVILIZED))	1	∀x(LivesInVan(x) → evaluation(UNCIVILIZED))	1	evaluation(UNCIVILIZED) | ~LivesInVan(v18)	1	evaluation(UNCIVILIZED) | ~LivesInVan(v18)	1								
10	people are not expected to love their family.	∀x∀y(People(x) ∧ Family(x,y) ∧ ¬ExpectedToLove(x,y) → evaluation(GOOD))	∀x(People(x) → ¬Love(x, family))	1	∀x∀y(People(x) ∧ Family(y) ∧ Has(x, y) → ¬ShouldLove(x,y))	1	∀x(Person(x) ∧ Family(x) → ¬ExpectedToLove(x))	1	∀x∀y(Person(x) ∧ Family(y) → ¬ExpectedToLove(x,y))	1	∀x∀y(Person(x) ∧ FamilyOf(x,y) → ¬ExpectToLove(x,y))	1	∀x(People(x) → ¬ExpectedToLoveFamily(x))	1	∀x∀y(People(x) ∧ Family(y,x) → ¬ExpectedToLove(x,y))	1	∀x∀y(Family(x,y) → ¬ExpectedToLove(x,y))	1	∀x∀y(Family(x,y) ∧ Love(y,x) → evaluation(UNEXPECTED))	1	evaluation(UNEXPECTED) | ~Family(v19, v20) | ~Love(v20, v19)	1	evaluation(UNEXPECTED) | ~Family(v19, v20) | ~Love(v20, v19)	1								
100	it's good to take care and do nice things for yourself.	∀x(TakeCare(x,x) ∧ DoNiceThingsFor(x,x) → evaluation(GOOD))	Good(TakeCare(self)) ∧ Good(DoNiceThings(self))	0	∀x(People(x) ∧ (TakeCareOfSelf(x) ∧ DoNiceThingsForSelf(x)) → evaluation(good))	1	∀x(TakeCare(x) ∧ DoNiceThings(x) → evaluation(good))	1	∀x(TakeCare(x) ∧ DoNiceThingsForSelf(x) → evaluation(good))	1	∀x(TakeCare(x) ∧ DoNiceThingsForSelf(x) → evaluation(good))	1	∀x(TakeCare(x) ∧ DoNiceThingsForSelf(x) → evaluation(good))	1	∀x(Self(x) ∧ TakeCare(x) ∧ DoNiceThingsFor(x) → evaluation(good))	1	∀x(TakesCare(x) ∧ DoesNiceThingsFor(x,x) → evaluation(GOOD))	1	∀x(TakeCare(x) ∧ DoNiceThingsForSelf(x) → evaluation(GOOD))	1	evaluation(GOOD) | ~TakeCare(v0) | ~DoNiceThingsForSelf(v0)	1	(¬TakeCare(v0) ∨ ¬DoNiceThingsForSelf(v0) ∨ evaluation(GOOD))	1							∀x(TakeCare(x) ∧ DoNiceThingsForSelf(x) → evaluation(GOOD))	1
101	it's okay to have doubts about your employers programs.	∀x∀y∀z(Program(x) ∧ Doubts(y,x) ∧ Employer(z,y) ∧ Owns(z,x) → evaluation(OKAY))	∃x (Employer(x) ∧ OkayToDoubt(x, programs))	1	∀x∀y(Employer(x) ∧ HasProgram(x, y) ∧ HasDoubts(y) → evaluation(okay))	1	∀x∀y(Employer(y) ∧ HasProgram(y,x) ∧ HasDoubtsAbout(x) → evaluation(okay))	1	∀x∀y(Employer(y) ∧ HasProgram(y,x) ∧ HasDoubts(x) → evaluation(okay))	1	∀x(HasDoubtsAboutEmployerProgram(x) → evaluation(okay))	1	∀x∀y(EmployersPrograms(x,y) ∧ HaveDoubts(x,y) → evaluation(okay))	1	∀x∀y(People(x) ∧ EmployersPrograms(y) ∧ BelongsTo(x,y) ∧ HaveDoubts(x,y) → evaluation(okay))	1	∀x∀y(Employer(x) ∧ Programs(y) ∧ HasDoubts(x,y) → evaluation(OKAY))	1	∀x∀y(Employer(x,y) ∧ HasDoubts(x,y) → evaluation(OKAY))	1	INVALID	0	INVALID	0							∀x∀y(Employer(x) ∧ Employee(y) ∧ HaveDoubts(y, Programs(x)) → evaluation(OK))	0
102	it's fun to hire a tour guide to learn about new places.	∀x∀y∀z((TourGuide(x) ∧ NewPlaces(y) ∧ Hire(z,x) ∧ LearnAbout(z,y)) → evaluation(FUN))	Fun(Hire(tour guide)) ∧ LearnAbout(new places)	0	∀x∀y(Hire(x, y) ∧ TourGuide(y) ∧ ∀z(NewPlace(z) → LearnAbout(x, z)) → evaluation(fun))	1	∀x∀y(Hires(x,y) ∧ TourGuide(y) ∧ LearnsAboutPlaces(x, new) → Fun(x))	1	∀x∀y((Hires(x,y) ∧ TourGuide(y) ∧ LearnsAboutNewPlaces(x)) → Fun(x))	1	∀x∀y((Hires(x,y) ∧ TourGuide(y) ∧ LearnsAboutNewPlaces(x,y)) → Fun(x))	1	∀x∀y(NewPlace(y) ∧ HireTourGuide(x, y) → Fun(x))	1	∀x∀y(NewPlace(y) ∧ HireTourGuide(x, y) → evaluation(fun))	1	∀x∀y(HiresTourGuide(x) ∧ LearnsAboutPlaces(x,y) → evaluation(FUN))	1	∀x∀y(TourGuide(y) ∧ Hire(x, y) ∧ LearnAboutPlaces(x) → evaluation(FUN))	1	INVALID	0	INVALID	0							∀x∀y(Hires(x, TourGuide(y)) ∧ LearnAboutNewPlaces(x) → evaluation(FUN))	0
103	it's good to go out camping with your buddies.	∀x∀y(Buddy(x,y) ∧ GoesCampingWith(x,y) → evaluation(GOOD))	GoCampingWith(buddies, you)	1	∀x∀y(GoOut(x) ∧ Camping(x) ∧ Buddies(x,y) → evaluation(good))	1	∀x∀y(Out(x) ∧ Camping(x) ∧ With(x,y) ∧ Buddies(y) → evaluation(good))	1	∀x∀y(GoOutCampingWith(x,y) ∧ Buddies(y) → evaluation(good))	1	∀x∀y((Buddies(x,y) ∧ GoOutCamping(x,y)) → evaluation(good))	1	∀x∀y(Camping(x,y) ∧ Buddies(x,y) → evaluation(good))	1	∀x∀y(Buddies(x,y) ∧ GoOutCampingWith(x,y) → evaluation(good))	1	∀x∀y(OutCampingWithBuddies(x,y) → evaluation(GOOD))	1	∀x∀y(Buddies(x,y) ∧ CampingWith(y,x) → evaluation(GOOD))	1	evaluation(GOOD) | ~GoOutCampingWithBuddies(v1, v2)	1	(¬GoOutCampingWithBuddies(v1, v2) ∨ evaluation(GOOD))	1							∀x∀y(GoOutCampingWithBuddies(x,y) → evaluation(GOOD))	1
104	people should date others based solely on their age.	∀x∀y(People(x) ∧ Others(y) ∧ DateBasedOnAge(x,y) → evaluation(GOOD))	∀x,y (Person(x) ∧ Person(y) → (Date(x, y) ↔ SameAge(x, y)))	0	∀x∀y(People(x) ∧ People(y) ∧ BasedOnAge(x, y) → ShouldDate(x, y))	1	∀x∀y(People(x) ∧ Others(y) → ShouldDateBasedOnAge(x,y))	1	∀x∀y(People(x) ∧ Others(y) → DateBasedOnAge(x,y))	1	∀x∀y(People(x) ∧ People(y) ∧ Date(x,y) → SolelyBasedOnAge(x,y))	1	∀x∀y(People(x) ∧ People(y) ∧ SolelyBasedOnAge(x,y) → ShouldDate(x,y))	1	∀x∀y(People(x) ∧ People(y) ∧ Age(y) → ShouldDateBasedOnAge(x,y))	1	∀x∀y(People(x) ∧ DateBasedOnAge(x,y) → evaluation(GOOD))	1	∀x∀y(People(x) ∧ People(y) ∧ DateBasedOnAge(x,y) → evaluation(GOOD))	1	evaluation(SHOULD) | ~People(v3) | ~People(v4) | ~DateBasedSolelyOnAge(v3, v4)	1	(¬People(v3) ∨ ¬People(v4) ∨ ¬DateBasedSolelyOnAge(v3, v4) ∨ evaluation(SHOULD))	1							∀x∀y(People(x) ∧ People(y) ∧ DateBasedSolelyOnAge(x,y) → evaluation(SHOULD))	1
105	you should sleep around if you don't want an std.	∀x(¬WantSTD(x) ∧ SleepAround(x) → evaluation(GOOD))	¬ SleepAround(you) → ¬ GetSTD(you)	1	¬(∀x(DoesntWant(x, 'std') → ShouldSleepAround(x)))	1	∀x(DontwantSTD(x) → SleepAround(x))	1	∀x(DontWantSTD(x) → ¬SleepAround(x))	1	∀x(DontWantSTD(x) → ¬SleepAround(x))	1	∀x(¬WantSTD(x) → ShouldSleepAround(x))	1	∀x(¬WantSTD(x) → ¬ShouldSleepAround(x))	1	∀x((¬WantSTD(x) ∧ SleepAround(x)) → evaluation(GOOD))	1	∀x(¬WantSTD(x) → (SleepAround(x) → evaluation(GOOD)))	1	evaluation(GOOD) | SleepAround(v5) | WantSTD(v5)	1	NOT HORN	0							∀x(¬WantSTD(x) → ¬SleepAround(x) → evaluation(GOOD))	1
106	you should not always get registration information when in an accident	∀y∃x(Accident(x) ∧ In(y,x) ∧ ¬GetRegistrationInfo(y) → evaluation(GOOD))	¬ (Accident ∧ AlwaysGet(RegistrationInformation))	0	∀x∀y(You(x) ∧ Accident(y) → ¬AlwaysGetRegistrationInformation(x))	1	∀x(Accident(x) → ¬Always(GetRegistrationInfo(x)))	0	∀x(InAccident(x) → ¬Always(GetRegistrationInfo(x)))	0	∀x∀y(InAccident(x,y) ∧ AlwaysGetRegistrationInfo(x) → ¬evaluation(good))	1	∀x(Accident(x) → ¬AlwaysGetRegistrationInfo(x))	1	∀x∀y(Accident(y) ∧ In(x,y) → ¬AlwaysGetRegistrationInfo(x))	1	∀x∀y(InAccident(x, y) ∧ AlwaysGetRegistrationInfo(x, y) → ¬evaluation(GOOD))	1	∀x∀y(Accident(y) ∧ InvolvedIn(x,y) ∧ AlwaysGetRegistrationInfo(x,y) → ¬evaluation(GOOD))	1	evaluation(SHOULD) | ~Accident(v6) | ~In(v7, v6) | AlwaysGetRegistrationInfo(v7)	1	NOT HORN	0							∀x∀y(Accident(x) ∧ In(y,x) ∧ ¬AlwaysGetRegistrationInfo(y) → evaluation(SHOULD))	1
107	people should root for the success of their friends' relationships.	∀x∀y∀z(People(x) ∧ Friends(x,y) ∧ Relationship(z) ∧ Has(y,z) ∧ RootFor(x,z) → evaluation(GOOD))	∀x, y (Person(x) ∧ Friends(x, y) ∧ Relationship(y) → ShouldRootForSuccessOfRelationship(x, y))	0	∀x∀y∀z(People(x) ∧ Friends(x,y) ∧ Relationship(z) ∧ Has(y,z) → ShouldRootForSuccess(x,z))	1	∀x∀y(Friends(x,y) ∧ Relationship(y) → ShouldRootForSuccess(x,y))	1	∀x∀y((Friends(x,y) ∧ Relationship(y)) → RootForSuccess(x))	1	∀x∀y(Friends(x,y) ∧ Relationship(y,z) → RootForSuccess(x,z))	1	∀x∀y(Friend(x, y) ∧ Relationship(y) → RootForSuccess(x, y))	1	∀x∀y∀z(People(x) ∧ Friends(x,y) ∧ Relationship(y,z) → ShouldRootForSuccess(x,z))	1	∀x∀y(Friends(x,y) ∧ Relationship(y,z) ∧ RootForSuccess(x,z) → evaluation(GOOD))	1	∀x∀y∀z(People(x) ∧ Friends(y,x) ∧ Relationship(z,y) ∧ RootForSuccess(x,z) → evaluation(GOOD))	1	evaluation(SHOULD) | ~RootForSuccess(v8, v10) | ~Friends(v8, v9) | ~Relationship(v9, v10)	1	(¬RootForSuccess(v8, v10) ∨ ¬Friends(v8, v9) ∨ ¬Relationship(v9, v10) ∨ evaluation(SHOULD))	1							∀x∀y∀z(Friends(x,y) ∧ Relationship(y,z) → RootForSuccess(x,z) → evaluation(SHOULD))	1
108	getting circumcised isn't normal.	∀x(GettingCircumcised(x) → ¬evaluation(NORMAL))	¬Normal(getting_circumcised)	1	¬∃x(Normal(x) ∧ Circumcised(x))	1	¬∀x(Circumcised(x) → Normal(x))	1	∀x(Circumcised(x) → ¬Normal(x))	1	∀x(GettingCircumcised(x) → ¬Normal(x))	1	¬∀x(GettingCircumcised(x) → Normal(x))	1	∀x(GettingCircumcised(x) → ¬Normal(x))	1	∀x(GettingCircumcised(x) → ¬evaluation(NORMAL))	1	∀x(GettingCircumcised(x) → ¬evaluation(NORMAL))	1	evaluation(NOT_NORMAL) | ~GettingCircumcised(v11)	1	(¬GettingCircumcised(v11) ∨ evaluation(NOT_NORMAL))	1							∀x(GettingCircumcised(x) → evaluation(NOT_NORMAL))	1
109	it's not ok to be frustrated when you work on amazon mechanical turk.	∀x(WorksOn(x,amazonmechanicalturk) ∧ Frustrated(x) → ¬evaluation(OK))	¬(Frustrated(Work(AmazonMechanicalTurk)))	0	∀x(WorkOnAmazonMechanicalTurk(x) ∧ Frustrated(x) → ¬ok(x))	1	∀x(WorkOnAMT(x) ∧ Frustrated(x) → evaluation(not_ok))	1	∀x(WorkOnAMT(x) ∧ Frustrated(x) → ¬evaluation(ok))	1	∀x(WorkOnAmazonMechanicalTurk(x) ∧ Frustration(x) → ¬evaluation(ok))	1	∀x(WorkOnAmazonMechanicalTurk(x) ∧ Frustrated(x) → ¬evaluation(ok))	1	∀x(WorkOnAmazonMechanicalTurk(x) ∧ Frustrated(x) → ¬evaluation(ok))	1	∀x(WorksOnAmazonMechanicalTurk(x) ∧ Frustrated(x) → ¬evaluation(OK))	1	∀x(WorksOnAmazonMechanicalTurk(x) ∧ Frustrated(x) → evaluation(NOT_OK))	1	evaluation(NOT_OK) | ~WorksOn(v12, 'AmazonMechanicalTurk') | ~Frustrated(v12)	1	(¬WorksOn(v12, 'AmazonMechanicalTurk') ∨ ¬Frustrated(v12) ∨ evaluation(NOT_OK))	1							∀x(WorksOn(x, 'AmazonMechanicalTurk') ∧ Frustrated(x) → evaluation(NOT_OK))	1
110	it's bad for your health scare to be averted.	∀x(HealthScare(x) ∧ Averted(x) → evaluation(BAD))	¬(Averted(HealthScare) → Bad(Health))	1	∀x(HealthScare(x) ∧ Averted(x) → evaluation(bad))	1	∀x∀y(HealthScare(x) ∧ Averted(y,x) → evaluation(bad))	1	∀x(HealthScare(x) ∧ Averted(x) → evaluation(bad))	1	∀x((HasHealthScare(x) ∧ IsAverted(HealthScare(x))) → evaluation(bad))	0	∀x∀y (HealthScare(x, y) ∧ Averted(y) → ¬evaluation(good))	1	∀x∀y (HealthScare(x, y) ∧ Averted(y) → evaluation(bad))	1	∀x(HealthScare(x) ∧ Averted(x) → ¬evaluation(GOOD))	1	∀x(HealthScare(x) ∧ Averted(x) → evaluation(BAD))	1	evaluation(BAD) | ~HealthScare(v13) | ~Averted(v13)	1	(¬HealthScare(v13) ∨ ¬Averted(v13) ∨ evaluation(BAD))	1							∀x(HealthScare(x) ∧ Averted(x) → evaluation(BAD))	1
200	it is bad to support a friend staying quit from smoking.	∀x∀y(Friend(x,y) ∧ StayingQuitFromSmoking(y) ∧ Support(x,y) → evaluation(BAD))	Bad(Support(Friend, StayingQuit(Smoking)))	0	∀x∀y (People(x) ∧ Friends(x,y) ∧ QuitSmoking(y) → ¬Support(x,y))	1	∀x∀y(Friend(x,y) ∧ StaysQuitFromSmoking(y) → evaluation(bad))	1	∀x∀y(Friends(x,y) ∧ Supports(x,QuitSmoking(y)) → evaluation(bad))	0	∀x∀y((Friends(x, y) ∧ SupportsStayingQuitSmoking(x, y)) → evaluation(bad))	1	∀x∀y(Friend(x,y) ∧ StayingQuitSmoking(y) ∧ Supports(x,y) → ¬evaluation(good))	1	∀x∀y(Friend(x, y) ∧ StayingQuitSmoking(y) ∧ Supports(x, y) → evaluation(bad))	1	∀x∀y(Friend(x,y) ∧ SupportsQuitSmoking(x,y) → evaluation(BAD))	1	∀x∀y((Friend(x,y) ∧ SupportsQuitSmoking(x,y)) → ¬evaluation(GOOD))	1	~evaluation(GOOD) | ~Friend(v39, v40) | ~SupportsQuitSmoking(v39, v40)	1	~evaluation(GOOD) | ~Friend(v39, v40) | ~SupportsQuitSmoking(v39, v40)	1								
201	it's wrong to single someone out based on their race.	∀x∀y∀z(SingleSomeoneOut(x) ∧ Race(y) ∧ BasedOn(x,y)) → evaluation(WRONG)	∀x(SinglingOut(x, race) → Wrong(x))	1	∀x∀y(Race(y) ∧ Has(x,y) ∧ SingleOutBasedOn(x, y) → evaluation(wrong))	1	∀x∀y(SingleOut(x,y) ∧ BasedOn(y,race) → ¬evaluation(good))	1	∀x∀y(SingleOutBasedOnRace(x,y) → evaluation(wrong))	1	∀x∀y(SingleOut(x,y) ∧ BasedOnRace(y) → evaluation(wrong))	1	∀x∀y(Race(x,y) ∧ SinglesOut(x,y) → ¬evaluation(good))	1	∀x∀y(People(x) ∧ Race(y) ∧ SinglesOutBasedOn(x,y) → evaluation(wrong))	1	∀x∀y((Person(x)∧ Race(y) ∧ BasedOn(x,y)) → ¬evaluation(GOOD))	1	∀x∀y(Person(x) ∧ Race(y) ∧ SingleOutBasedOn(x,y) → evaluation(WRONG))	1	evaluation(WRONG) | ~Person(v41) | ~Race(v42) | ~SingleOutBasedOn(v41, v42)	1	evaluation(WRONG) | ~Person(v41) | ~Race(v42) | ~SingleOutBasedOn(v41, v42)	1								
202	you shouldn't get help if your anxiety is interfering with your daily life	∀x∀y(Anxiety(x) ∧ InterfereWithDailyLife(x,y) ∧ ¬Help(y) → evaluation(GOOD))	¬(Interferes(anxiety, dailyLife) → GetHelp(you))	1	∀x(People(x) ∧ (AnxietyInterferesDailyLife(x) → ¬ShouldGetHelp(x)))	1	∀x(Anxiety(x) ∧ InterferesWithDailyLife(x) → ¬ShouldGetHelp(x))	1	∀x((Anxiety(x) ∧ InterferesWithDailyLife(x)) → ¬GetHelp(x))	1	∀x(HasAnxiety(x) ∧ InterferesWithDailyLife(x) → ¬GetHelp(x))	1	∀x((Anxiety(x) ∧ InterferesDailyLife(x)) → ¬GetHelp(x))	1	∀x∀y((People(x) ∧ HaveAnxiety(y,x) ∧ InterferesDailyLife(y)) → ¬ShouldGetHelp(x,y))	1	∀x(AnxietyInterferes(x, DailyLife(x)) → ¬evaluation(GOOD))	0	∀x∀y(AnxietyInterferes(x,y) ∧ DailyLife(y) → ¬evaluation(GOOD))	1	~evaluation(GOOD) | ~AnxietyInterferes(v43, v44) | ~DailyLife(v44)	1	~evaluation(GOOD) | ~AnxietyInterferes(v43, v44) | ~DailyLife(v44)	1								
203	it is unexpected people will feel proud of their country.	∀x∀y(Country(x) ∧ People(y) ∧ BelongsTo(y,x) ∧ FeelProud(y,x) → evaluation(UNEXPECTED))	∀x (Person(x) → ¬FeelProud(x, Country))	1	∀x(People(x) ∧ Country(x,y) → ¬ExpectedFeelProudOf(x,y))	1	∀x(People(x) ∧ Country(x) → ¬Expectation(Proud(x)))	0	∀x∀y(People(x) ∧ Country(y) → ¬Expectation(x, ProudOf(y)))	0	∀x∀y(People(x) ∧ TheirCountry(x,y) → ¬Expectation(ProudOf(x,y)))	0	∀x(People(x) ∧ Country(x) → ¬ExpectedProudOf(x))	1	∀x∀y(Country(x) ∧ People(y) ∧ BelongsTo(y,x) ∧ FeelProud(y,x) → evaluation(unexpected))	1	∀x∀y(country(x,y) ∧ FeelingProud(y) → ¬evaluation(EXPECTED))	1	∀x∀y(Country(x) ∧ People(y) ∧ BelongsTo(y,x) ∧ FeelProud(y,x) → evaluation(UNEXPECTED))	1	evaluation(UNEXPECTED) | ~Country(v45) | ~People(v46) | ~BelongsTo(v46, v45) | ~FeelProud(v46, v45)	1	evaluation(UNEXPECTED) | ~Country(v45) | ~People(v46) | ~BelongsTo(v46, v45) | ~FeelProud(v46, v45)	1								
204	it's expected that you won't cut off family members.	∀x∀y(FamilyMember(x,y) ∧ ¬CutOff(x,y) → evaluation(EXPECTED))	∀x (FamilyMember(x) → ¬CutOff(x))	1	∀x∀y(People(x) ∧ FamilyMember(y, x) → ¬ExpectedToCutOff(x,y))	1	∀x(FamilyMember(x) → ¬ExpectedToCutOff(x))	1	∀x(FamilyMember(x) → ¬ExpectToCutOff(y,x))	1	∀x∀y(FamilyMember(x,y) → ¬CutOff(y,x))	1	∀x(FamilyMember(x) → ¬CutOff(x))	1	∀x∀y(FamilyMember(x,y) → CutOff(y,x) → evaluation(expected))	1	∀x∀y(Family(x,y) ∧ ¬CutOff(x,y) → evaluation(EXPECTED))	1	∀x∀y(Family(x,y) ∧ ¬CutOff(y,x) → evaluation(EXPECTED))	1	evaluation(EXPECTED) | ~Family(v47, v48) | CutOff(v48, v47)	1	evaluation(EXPECTED) | ~Family(v47, v48) | CutOff(v48, v47)	1								
205	it's bad to show one's feelings for your partner.	∀x∀y(Partner(y) ∧ ShowFeelings(x,y) → evaluation(BAD))	BadToShowFeelingsForPartner(person)	1	∀x∀y(Partner(x,y) ∧ ShowFeelings(x) → evaluation(bad))	1	∀x∀y(Partner(x,y) ∧ ShowsFeelingsFor(x, y) → evaluation(bad))	1	∀x∀y(Partner(x,y) ∧ ShowsFeelings(x,y) → evaluation(bad))	1	∀x∀y(PartnerOf(x,y) ∧ ShowFeelings(x) → evaluation(bad))	1	∀x∀y(Partner(x,y) ∧ ShowsFeelings(x,y) → ¬evaluation(good))	1	∀x∀y(Partner(x,y) ∧ ShowsFeelings(x,y) → evaluation(bad))	1	∀x∀y(FeelingsForPartner(x,y) ∧ Shows(x,y) → evaluation(BAD))	1	∀x∀y(Partner(x,y) ∧ Feelings(y,x) ∧ Show(y,x) → evaluation(BAD))	1	evaluation(BAD) | ~Partner(v49, v50) | ~Feelings(v50, v49) | ~Show(v50, v49)	1	evaluation(BAD) | ~Partner(v49, v50) | ~Feelings(v50, v49) | ~Show(v50, v49)	1								
206	it is good to be the bigger person and not hold a grudge.	∀x(BiggerPerson(x) ∧ ¬HoldGrudge(x) → evaluation(GOOD))	GoodToBeBiggerPerson(x) ∧ ¬HoldGrudge(x)	1	∀x((Person(x) ∧ Bigger(x)) ∧ ¬ HoldGrudge(x) → evaluation(good))	1	∀x(BiggerPerson(x) ∧ ¬HoldsGrudge(x) → evaluation(good))	1	∀x(BiggerPerson(x) ∧ ¬HoldsGrudge(x) → evaluation(good))	1	∀x(BeBiggerPerson(x) ∧ ¬HoldGrudge(x) → evaluation(good))	1	∀x∀y(BeBiggerPerson(x) ∧ ¬HoldGrudge(x) → evaluation(good))	1	∀x(BeBiggerPerson(x) ∧ ¬HoldGrudge(x) → evaluation(good))	1	∀x∀y((BiggerPerson(x) ∧ ¬HoldsGrudge(x,y)) → evaluation(GOOD))	1	∀x(BiggerPerson(x) ∧ ¬HoldsGrudge(x) → evaluation(GOOD))	1	evaluation(GOOD) | ~BiggerPerson(v51) | HoldsGrudge(v51)	1	evaluation(GOOD) | ~BiggerPerson(v51) | HoldsGrudge(v51)	1								
207	it's not admirable when people are able to admit their mistakes.	∀x(AbleToAdmitMistakes(x) → ¬evaluation(ADMIRABLE))	¬(∀x, (IsPerson(x) ∧ AbleToAdmitMistakes(x)) → Admirable(x))	0	∀x∀y(People(x) ∧ Mistakes(y) ∧ Admit(x,y) → ¬Admirable(x))	1	¬∀x∀y((People(x) ∧ AbleToAdmitMistake(x)) → Admirable(y))	1	∀x(People(x) ∧ AbleToAdmitMistake(x) → ¬Admirable(x))	1	∀x(People(x) ∧ AbleToAdmitMistake(x) → ¬evaluation(admirable))	1	∀x(People(x) ∧ AbleToAdmitMistakes(x) → ¬evaluation(admirable))	1	∀x(People(x) ∧ AbleToAdmitMistakes(x) → ¬evaluation(admirable))	1	∀x(AdmitMistakes(x) → ¬evaluation(ADMIRABLE))	1	∀x(People(x) ∧ AbleAdmitMistakes(x) → ¬evaluation(ADMIRABLE))	1	~evaluation(ADMIRABLE) | ~People(v52) | ~AbleAdmitMistakes(v52)	1	~evaluation(ADMIRABLE) | ~People(v52) | ~AbleAdmitMistakes(v52)	1								
208	it's good to care about your family's history.	∀x∀y(FamilyHistory(y) ∧ Cares(x,y) → evaluation(GOOD))	GoodToCareAbout(person, familyHistoryOf(person))	0	∀x(Family(x) ∧ History(x) → evaluation(Care(good)))	0	∀x(CaresAbout(x, FamilyHistory(x)) → evaluation(good))	0	∀x(CaresAbout(x, FamilyHistory(x)) → evaluation(good))	0	∀x(CaresAbout(x, FamilyHistory(x)) → evaluation(good))	0	∀x(Family(x) → (CareAboutHistory(x) → evaluation(good)))	1	∀x∀y(Family(x,y) ∧ History(x) → (CareAbout(y,x) → evaluation(good)))	1	∀x∀y(FamilyHistory(x,y) ∧ Cares(x,y) → evaluation(GOOD))	1	∀x∀y(Family(x) ∧ History(y,x) ∧ Care(y,x) → evaluation(GOOD))	1	evaluation(GOOD) | ~Family(v53) | ~History(v54, v53) | ~Care(v54, v53)	1	evaluation(GOOD) | ~Family(v53) | ~History(v54, v53) | ~Care(v54, v53)	1								
209	it's bad to phrase something awkwardly.	∀x∀y(IsSomething(y) ∧ PhraseAkwardly(x,y) → evaluation(BAD))	∀x(Phrase(x) ∧ Awkwardly(x) → Bad(x))	1	∀x(PhrasesSomething(x) ∧ Awkwardly(x) → evaluation(bad))	1	∀x(PhrasesSomethingAwkwardly(x) → evaluation(bad))	1	∀x(PhraseSomething(x) ∧ Awkwardly(x) → evaluation(bad))	1	∀x(PhraseSomething(x) ∧ Awkwardly(x) → evaluation(bad))	1	∀x(AwkwardPhrase(x) → ¬evaluation(good))	1	∀x(PhraseSomething(x) ∧ Awkward(x) → evaluation(bad))	1	∀x(PhrasingSomething(x) ∧ Awkward(x) → evaluation(BAD))	1	∀x(PhraseSomething(x) ∧ Awkward(x) → evaluation(BAD))	1	evaluation(BAD) | ~PhraseSomething(v55) | ~Awkward(v55)	1	evaluation(BAD) | ~PhraseSomething(v55) | ~Awkward(v55)	1								
210	it's not okay to expect someone care about to be a perfect person.	∀x(CareAbout(x,y) ∧ ExpectsToBePerfect(x,y) → ¬evaluation(OKAY))	¬∀x (Person(x) → (HasExpectation(y, Perfect(x))))	0	∀x∀y(CaresAbout(x,y) ∧ ExpectsPerfectPerson(x,y) → ¬evaluation(ok))	1	∀x(ExpectPerfectPerson(x) → ¬evaluation(okay))	1	∀x∀y(ExpectPerfectPerson(x,y) → ¬evaluation(okay))	1	∀x∀y(Expect(x, PerfectPerson(y)) ∧ CareAbout(x,y) → ¬evaluation(okay))	0	∀x∀y(ExpectsPerfectPerson(x,y) → ¬evaluation(ok))	1	∀x∀y((Person(x) ∧ CareAbout(y,x) ∧ ExpectsPerfectPerson(y,x)) → ¬evaluation(ok))	1	∀x∀y(ExpectPerfectPerson(x,y) → ¬evaluation(OKAY))	1	∀x∀y(CareAbout(x,y) ∧ ExpectPerfect(y) → ¬evaluation(OKAY))	1	~evaluation(OKAY) | ~CareAbout(v56, v57) | ~ExpectPerfect(v57)	1	~evaluation(OKAY) | ~CareAbout(v56, v57) | ~ExpectPerfect(v57)	1								
300	it's unreasonable to be compassionate when someone shares that they've suffered a loss in their family.	∀x∀y(SharesThatTheySufferedLossInFamily(x,y) ∧ Compassionate(y) → evaluation(UNREASONABLE))															∀x∀y(SharesLoss(x, y) ∧ Compassionate(x, y) → ¬evaluation(REASONABLE))	1	∀x∀y(Family(x,y) ∧ SufferedLoss(x) ∧ Shares(x,y) ∧ Compassionate(y,x) → evaluation(UNREASONABLE))	1	evaluation(UNREASONABLE) | ~Family(v0, v1) | ~SufferedLoss(v0) | ~Shares(v0, v1) | ~Compassionate(v1, v0)	1	¬Family(v0, v1) ∨ ¬SufferedLoss(v0) ∨ ¬Shares(v0, v1) ∨ ¬Compassionate(v1, v0) ∨ evaluation(UNREASONABLE)	1								
302	it is good not to spend money you do not have.	∀x∀y(Money(x) ∧ ¬Have(y,x) ∧ ¬Spend(y,x) → evaluation(GOOD))															∀x(SpendingMoney(x) ∧ ¬HasKey(x) → evaluation(GOOD))	1	∀x∀y(Money(y) ∧ People(x) ∧ Spend(x,y) ∧ ¬Have(x,y) → evaluation(GOOD))	1	evaluation(GOOD) | ~Money(v5) | ~People(v4) | ~Spend(v4, v5) | Have(v4, v5)	1	NOT HORN	0								
303	it's bad to make your life easier.	∀x∀y(Life(x) ∧ BelongsTo(x,y) ∧ MakeEasier(y,x) → evaluation(BAD))															∀x(MakeLifeEasier(x) → evaluation(BAD))	1	∀x(People(x) ∧ MakeLifeEasier(x) → evaluation(BAD))	1	evaluation(BAD) | ~People(v6) | ~MakeLifeEasier(v6)	1	¬People(v6) ∨ ¬MakeLifeEasier(v6) ∨ evaluation(BAD)	1								
304	it's ok to have a debate with someone.	∀x∀y(HaveDebate(x,y) → evaluation(OKAY))															∀x∀y(DebateWith(x,y) → evaluation(OK))	1	∀x∀y(Someone(x) ∧ HaveDebateWith(y,x) → evaluation(OK))	1	evaluation(OK) | ~Someone(v7) | ~HaveDebateWith(v8, v7)	1	¬Someone(v7) ∨ ¬HaveDebateWith(v8, v7) ∨ evaluation(OK)	1								
305	you shouldn't watch tv at work.	∀x(WatchTV(x) ∧ IsAtWork(x) → evaluation(BAD))															∀x∀y(Watch(x, TV) ∧ At(y, work) → ¬evaluation(GOOD))	1	∀x∀y(People(x) ∧ Work(y) ∧ WatchAt(x, TV, y) → ¬evaluation(GOOD))	1	~evaluation(GOOD) | ~People(v9) | ~Work(v10) | ~WatchAt(v9, TV, v10)	1	¬evaluation(GOOD) ∨ ¬People(v9) ∨ ¬Work(v10) ∨ ¬WatchAt(v9, TV, v10)	1								
306	it's wrong to let your partner know your boundaries regarding contact with exes.	∀x∀y∀z(BoundariesRegardingContactWithExes(x) ∧ Has(y,x) ∧ Partners(y,z) ∧ LetsKnowAbout(y,z,x) → evaluation(WRONG))															∀x∀y(Partner(x) ∧ Ex(y) ∧ BoundaryWithEx(x,y) → ¬evaluation(GOOD))	1	∀x∀y∀z(Partner(x,y) ∧ Ex(z) ∧ BoundaryWithEx(z,y) ∧ LetKnow(x,z) → evaluation(WRONG))	1	evaluation(WRONG) | ~Partner(v11, v12) | ~Ex(v13) | ~BoundaryWithEx(v13, v12) | ~LetKnow(v11, v13)	1	¬Partner(v11, v12) ∨ ¬Ex(v13) ∨ ¬BoundaryWithEx(v13, v12) ∨ ¬LetKnow(v11, v13) ∨ evaluation(WRONG)	1								
307	it's considered rude to badmouth friends' significant others.	∀x∀y∀z(Friends(x,y) ∧ SignificantOther(z,y) ∧ Badmouths(x,z) → evaluation(RUDE))															∀x∀y∀z(Friends(x,y) ∧ SignificantOthers(y,z) ∧ BadMouths(x,z) → ¬evaluation(POLITE))	1	∀x∀y∀z(Friends(x,y) ∧ SignificantOthers(y,z) ∧ BadMouths(x,z) → evaluation(RUDE))	1	evaluation(RUDE) | ~Friends(v14, v15) | ~SignificantOthers(v15, v16) | ~BadMouths(v14, v16)	1	¬Friends(v14, v15) ∨ ¬SignificantOthers(v15, v16) ∨ ¬BadMouths(v14, v16) ∨ evaluation(RUDE)	1								
308	it's expected that you stay with the person you plan on marrying.	∀x∀y(Person(x) ∧ PlanOnMarrying(y,x) ∧ StayWith(y,x) → evaluation(EXPECTED))															∀x∀y(PlansOnMarrying(x,y) → StaysWith(x,y) → evaluation(EXPECTED))	1	∀x∀y(Person(x) ∧ Person(y) ∧ PlansOnMarrying(x, y) → StaysWith(x, y)) → evaluation(EXPECTED)	1	evaluation(EXPECTED) | ~StaysWith(C0, C1) & Person(C0) & Person(C1) & PlansOnMarrying(C0, C1)	1	¬StaysWith(C0, C1) & Person(C0) & Person(C1) & PlansOnMarrying(C0, C1) ∨ evaluation(EXPECTED)	1								
309	it is polite to not listen to people's feelings.	∀x∀y∀z(People(x) ∧ HasFeelings(x,y) ∧ ¬ListenTo(z,y) → evaluation(POLITE))															∀x∀y(ListensToFellings(x,y) ∧ ¬x → evaluation(POLITE))	0	∀x∀y(People(x) ∧ Feelings(y,x) ∧ ¬ListenTo(y) → evaluation(POLITE))	1	evaluation(POLITE) | ~People(v17) | ~Feelings(v18, v17) | ListenTo(v18)	1	NOT HORN	0								
310	it's taboo to admit that you don't like your step child.	∀x∀y(¬LikingStepChild(x) ∧ Admits(y,x) → evaluation(TABOO))															∀x∀y(StepChild(x,y) ∧ ¬Likes(x,y) → evaluation(TABOO))	1	∀x∀y(StepChild(x,y) ∧ Admit(x,¬Likes(x,y)) → evaluation(TABOO))	0	INVALID	0	INVALID	0								
400	it is fine to drink sugary soda.	∀x∀y(SugarySoda(x) ∧ Drink(y,x) → evaluation(FINE))															∀x(Drink(x,SugarySoda) → evaluation(FINE))	1	∀x(Drink(x,SUGARY_SODA) → evaluation(FINE))	1	evaluation(FINE) | ~Drink(v19, SUGARY_SODA)	1	¬Drink(v19, SUGARY_SODA) ∨ evaluation(FINE)	1								
401	you should expect to avoid spoilers for a show that is old.	∀x∀y∀z(Show(x) ∧ Old(x) ∧ SpoilerFor(y,x) ∧ Avoid(z,y) → evaluation(EXPECTED))															∀x∀y(ExpectedToAvoidSpoilers(x,y) ∧ ShowIsOld(y) → evaluation(GOOD))	1	∀x∀y(Show(y) ∧ IsOld(y) ∧ ExpectedToAvoidSpoilers(x,y) → evaluation(GOOD))	1	evaluation(GOOD) | ~Show(v21) | ~IsOld(v21) | ~ExpectedToAvoidSpoilers(v20, v21)	1	¬Show(v21) ∨ ¬IsOld(v21) ∨ ¬ExpectedToAvoidSpoilers(v20, v21) ∨ evaluation(GOOD)	1								
402	you should intentionally harm someone's things.	∀x∀y∀z(BelongsTo(x,z) ∧ Thing(x) ∧ IntentionallyHarm(z,x) → evaluation(GOOD))															∀x∀y(IntentionalHarm(x, things(y)) → ¬evaluation(GOOD))	0	∀x∀y(People(x) ∧ Things(y) ∧ IntentionalHarm(x,y) → ¬evaluation(GOOD))	1	~evaluation(GOOD) | ~People(v22) | ~Things(v23) | ~IntentionalHarm(v22, v23)	1	¬evaluation(GOOD) ∨ ¬People(v22) ∨ ¬Things(v23) ∨ ¬IntentionalHarm(v22, v23)	1								
403	it's not fair to have one pet roam the house while the others are locked up.	(Pet(X) ∧ Pet(Y) ∧ RoamAroundHouse(Y) ∧ LockedUp(Y) → evaluation(NOT_FAIR))															∀x∀y∀z(HavePet(x) ∧ RoamHouse(y) ∧ LockedUp(z) ∧ unequal(y,z) → ¬evaluation(FAIR))	1	∀x∀y∀z(Pet(x) ∧ RoamHouse(x,y) ∧ LockedUp(x,z) ∧ ¬(y=z) → ¬evaluation(FAIR))	0	INVALID	0	INVALID	0								
404	it's not your right to complain about a teacher who is not performing up to standard.	∀x∀y(Teacher(x) ∧ NotPerformingUpToStandard(x) ∧ ComplainAbout(y,x) → evaluation(NOT_RIGHT))															∀x∀y((Teacher(y) ∧ NotPerformingUpToStandard(y) ∧ ComplainAbout(x, y)) → ¬evaluation(RIGHT))	1	∀x∀y((Teacher(y) ∧ NotPerformingUpToStandard(y) ∧ ComplainAbout(x, y)) → ¬evaluation(GOOD))	1	~evaluation(GOOD) | ~Teacher(v25) | ~NotPerformingUpToStandard(v25) | ~ComplainAbout(v24, v25)	1	¬evaluation(GOOD) ∨ ¬Teacher(v25) ∨ ¬NotPerformingUpToStandard(v25) ∨ ¬ComplainAbout(v24, v25)	1								
405	you should talk to people about your fetishes.	∀x∀y∀z(Fetish(x) ∧ Has(y,x) ∧ People(z) ∧ TalkToAbout(y,z,x) → evaluation(GOOD))															∀x∀y(Talks(x,y) ∧ Fetishes(y) → evaluation(GOOD))	1	∀x∀y(People(x) ∧ Fetishes(y) ∧ TalksAbout(x, y) → evaluation(GOOD))	1	evaluation(GOOD) | ~People(v26) | ~Fetishes(v27) | ~TalksAbout(v26, v27)	1	¬People(v26) ∨ ¬Fetishes(v27) ∨ ¬TalksAbout(v26, v27) ∨ evaluation(GOOD)	1								
406	it is rude to point out physical differences in people.	∀x∀y∀z(People(x) ∧ PhysicalDifference(z) ∧ Has(x,z) ∧ PointsOut(y,z) → evaluation(RUDE))															∀x∀y(PointOutPhysicalDifferences(x,y) → ¬evaluation(POLITE))	1	∀x∀y(People(x) ∧ People(y) ∧ PointOutPhysicalDifferences(x,y) → evaluation(RUDE))	1	evaluation(RUDE) | ~People(v28) | ~People(v29) | ~PointOutPhysicalDifferences(v28, v29)	1	¬People(v28) ∨ ¬People(v29) ∨ ¬PointOutPhysicalDifferences(v28, v29) ∨ evaluation(RUDE)	1								
407	you shouldn't expect everyone to celebrate their birthday.	∀x∀y∀z(CelebrateBirthday(x) ∧ ExpectsTo(y,z,x) → evaluation(BAD))															∀x∀y(Expect(x,BirthdayCelebration(y)) → ¬evaluation(GOOD))	0	∀x∀y(Person(x) ∧ Birthday(y,x) ∧ Expect(y) → ¬evaluation(GOOD))	1	~evaluation(GOOD) | ~Person(v30) | ~Birthday(v31, v30) | ~Expect(v31)	1	¬evaluation(GOOD) ∨ ¬Person(v30) ∨ ¬Birthday(v31, v30) ∨ ¬Expect(v31)	1								
408	you should always support your friends at their wedding.	∀x∀y∀z(Friends(x,y) ∧ Wedding(z) ∧ Has(y,z) ∧ IsAt(x,z) ∧ Support(x,y) → evaluation(GOOD))															∀x∀y(Friends(x,y) ∧ Wedding(y) ∧ Supports(x,y) → evaluation(GOOD))	1	∀x∀y(Friends(x,y) ∧ WeddingOf(y,z) ∧ Supports(x,y) → evaluation(GOOD))	1	evaluation(GOOD) | ~Friends(v32, v33) | ~WeddingOf(v33, v34) | ~Supports(v32, v33)	1	¬Friends(v32, v33) ∨ ¬WeddingOf(v33, v34) ∨ ¬Supports(v32, v33) ∨ evaluation(GOOD)	1								
409	it's not ok to join in on fun activities.	∀x∀y(Activity(x) ∧ Fun(x) ∧ JoinIn(y,x) → evaluation(NOT_OK))															∀x(JoinFunActivities(x) → ¬evaluation(OK))	1	∀x(JoinsInFunActivities(x) → ¬evaluation(OK))	1	~evaluation(OK) | ~JoinsInFunActivities(v35)	1	¬evaluation(OK) ∨ ¬JoinsInFunActivities(v35)	1								
410	it's not ok to report someone who is shoplifting.	∀x∀y(Shoplifts(x) ∧ Reports(y,x) → evaluation(NOT_OK))															∀x∀y(Shoplifting(y) ∧ Report(x,y) → ¬evaluation(OK))	1	∀x∀y(Shoplifting(y) ∧ Report(x, y) → ¬evaluation(OK))	1	~evaluation(OK) | ~Shoplifting(v37) | ~Report(v36, v37)	1	¬evaluation(OK) ∨ ¬Shoplifting(v37) ∨ ¬Report(v36, v37)	1								
500	it's ok to enjoy oral sex.	∀x∀y(OralSex(x) ∧ Enjoy(y,x) → evaluation(OK))															∀x(EnjoyOralSex(x) → evaluation(OK))	1	∀x(Person(x) ∧ EnjoyOralSex(x) → evaluation(OK))	1	evaluation(OK) | ~Person(v38) | ~EnjoyOralSex(v38)	1	¬Person(v38) ∨ ¬EnjoyOralSex(v38) ∨ evaluation(OK)	1								
501	it's okay to be weary about a job applicant's past.	∀x∀y∀z(JobApplicant(x) ∧ HasPast(x,y) ∧ WaryAbout(z,y) → evaluation(OK))																			evaluation(OKAY) | ~JobApplicant(v0) | ~Past(v1) | ~BelongsTo(v1, v0) | ~IsWaryAbout(v0, v1)	1	(¬JobApplicant(v0) ∨ ¬Past(v1) ∨ ¬BelongsTo(v1, v0) ∨ ¬IsWaryAbout(v0, v1) ∨ evaluation(OKAY))	1	∀x∀y(JobApplicant(x,y) ∧ IsWary(x,y) → evaluation(OKAY))	1	∀x∀y(JobApplicant(x) ∧ Past(y) ∧ BelongsTo(y, x) ∧ IsWaryAbout(x,y) → evaluation(OKAY))	1				
502	it's not okay to leave a relationship that doesn't work for you.	∀x∀y(Relationship(x) ∧ ¬Work(x,y) ∧ Leave(y,x) → evaluation(NOT_OK))																			evaluation(NOT_OKAY) | ~Relationship(v3, v2) | WorksFor(v3, v2) | ~Leaves(v3, v2)	1	NOT HORN	0	∀x∀y(Relationship(x,y) ∧ ¬WorksFor(x,y) ∧ Leaves(x,y) → evaluation(NOT_OKAY))	1	∀x∀y(Relationship(y,x) ∧ ¬WorksFor(y,x) ∧ Leaves(y,x) → evaluation(NOT_OKAY))	1				
503	surviving a plane crash is lucky.	∀x∀y(PlaneCrash(x) ∧ In(y,x) ∧ Survive(y) → evaluation(LUCKY))																			evaluation(LUCKY) | ~Survives(v4, 'PlaneCrash')	1	(¬Survives(v4, 'PlaneCrash') ∨ evaluation(LUCKY))	1	∀x(SurvivingPlaneCrash(x) → evaluation(LUCKY))	1	∀x(Survives(x, 'PlaneCrash') → evaluation(LUCKY))	1				
504	it's not okay to have someone in your life that makes you miserable.	∀x∀y(IsInLife(x,y) ∧ MakesMiserable(x,y) → evaluation(NOT_OK))																			evaluation(NOT_OKAY) | ~InLife(v5, v6) | ~MakesMiserable(v6, v5)	1	(¬InLife(v5, v6) ∨ ¬MakesMiserable(v6, v5) ∨ evaluation(NOT_OKAY))	1	∀x∀y(InLife(x,y) ∧ MakesMiserable(y,x) → evaluation(NOT_OKAY))	1	∀x∀y(InLife(x, y) ∧ MakesMiserable(y, x) → evaluation(NOT_OKAY))	1				
505	it's wrong to get involved in drug activity.	∀x∀y(DrugActivity(x) ∧ GetInvolved(y,x) → evaluation(WRONG))																			evaluation(WRONG) | ~GetInvolvedInDrugs(v7)	1	(¬GetInvolvedInDrugs(v7) ∨ evaluation(WRONG))	1	∀x(GetInvolvedInDrugs(x) → evaluation(WRONG))	1	∀x(GetInvolvedInDrugs(x) → evaluation(WRONG))	1				
506	telling your girlfriend that her wardrobe is attractive is hurtful.	∀x∀y∀z(GirlfriendOf(x,y) ∧ SaysThatWardrobeIsAttractive(z) ∧ Tells(y,x,z) → evaluation(HURTFUL))																			INVALID	0	INVALID	0	∀x∀y(Girlfriend(x,y) ∧ Tells(x, AttractiveWardrobe(y)) → evaluation(HURTFUL))	0	∀x∀y(Girlfriend(y,x) ∧ Tells(x, AttractiveWardrobe(y)) → evaluation(HURTFUL))	0				
507	it's expected that you try to compromise with your friends.	∀x∀y(Friends(x,y) ∧ TriesToCompromiseWith(x,y) → evaluation(EXPECTED))																			evaluation(EXPECTED) | ~Friends(v8, v9) | ~TriesToCompromise(v9, v8)	1	(¬Friends(v8, v9) ∨ ¬TriesToCompromise(v9, v8) ∨ evaluation(EXPECTED))	1	∀x∀y(Friends(x,y) ∧ TriesToCompromise(x,y) → evaluation(EXPECTED))	1	∀x∀y(Friends(x,y) ∧ TriesToCompromise(y,x) → evaluation(EXPECTED))	1				
508	it's not rude to watch youtube channels just to bully children.	∀x∀y(Children(y) ∧ WatchYoutubeToBully(x,y) → evaluation(NOT_RUDE))																			evaluation(NOT_RUDE) | ~People(v10) | ~Children(v11) | ~YouTubeChannel(v12) | ~Watch(v10, v12) | ~Bully(v10, v11)	1	(¬People(v10) ∨ ¬Children(v11) ∨ ¬YouTubeChannel(v12) ∨ ¬Watch(v10, v12) ∨ ¬Bully(v10, v11) ∨ evaluation(NOT_RUDE))	1	∀x∀y(WatchYouTube(x, y) ∧ Bully(x, y) → evaluation(NOT_RUDE))	1	∀x∀y∀z(People(x) ∧ Children(y) ∧ YouTubeChannel(z) ∧ Watch(x, z) ∧ Bully(x, y) → evaluation(NOT_RUDE))	1				
509	it is wrong for a teacher to bully a student.	∀x∀y(Teacher(x) ∧ Student(y) ∧ Bullies(x,y) → evaluation(WRONG))																			evaluation(WRONG) | ~Teacher(v13) | ~Student(v14) | ~Bullies(v13, v14)	1	(¬Teacher(v13) ∨ ¬Student(v14) ∨ ¬Bullies(v13, v14) ∨ evaluation(WRONG))	1	∀x∀y(Teacher(x) ∧ Student(y) ∧ Bullies(x, y) → evaluation(WRONG))	1	∀x∀y(Teacher(x) ∧ Student(y) ∧ Bullies(x, y) → evaluation(WRONG))	1				
510	it's wrong to look for other options if your present choice is not satisfactory to you.	∀y(PresentChoice(X) ∧ BelongsTo(X,y) ∧ ¬Satisfactory(X,y) ∧ Option(Z) ∧ LookFor(y,Z) → evaluation(WRONG))																			evaluation(WRONG) | ~Choice(v16, v15) | ~NotSatisfactory(v16) | ~LookForOtherOptions(v15)	1	(¬Choice(v16, v15) ∨ ¬NotSatisfactory(v16) ∨ ¬LookForOtherOptions(v15) ∨ evaluation(WRONG))	1	∀x(NotSatisfactory(x, PresentChoice(x)) ∧ LookForOtherOptions(x) → evaluation(WRONG))	0	∀x∀y(Choice(y,x) ∧ NotSatisfactory(y) ∧ LookForOtherOptions(x) → evaluation(WRONG))	1				
																								1					∀x(TakeCare(x) ∧ DoNiceThingsForSelf(x) → evaluation(GOOD))	1		
																								0					∀x∀y(Employer(x,y) ∧ Doubts(y) → evaluation(OK))	1		
																								0					∀x∀y(SomeoneHireTourGuide(x) ∧ LearnAboutNewPlaces(x, y) → evaluation(FUN))	1		
																								1					∀x∀y(GoOutCamping(x,y) ∧ Buddies(y) → evaluation(GOOD))	1		
																								1					∀x∀y(People(x) ∧ DateBasedOnAge(x,y) → evaluation(GOOD))	1		
																								0					∀x(¬WantSTD(x) ∧ ¬SleepAround(x) → evaluation(GOOD))	1		
																								0					∀x∀y(Accident(y) ∧ In(x,y) ∧ ¬AlwaysGetRegistrationInfo(x) → evaluation(GOOD))	1		
																								1					∀x∀y(Friends(x,y) ∧ Relationship(y,z) ∧ RootForSuccess(x,z) → evaluation(GOOD))	1		
																								1					∀x(GettingCircumcised(x) → evaluation(NOT_NORMAL))	1		
																								1					∀x(WorksOn(x, AMAZONMECHANICALTURK) ∧ Frustrated(x) → evaluation(NOT_OK))	1		
																								1					∀x(HealthScare(x) ∧ Averted(x) → evaluation(BAD))	1		
100	it's good to take care and do nice things for yourself.																				evaluation(GOOD) | ~TakesCare(v0, v0) | ~DoesNiceThings(v0, v0)	1	(¬TakesCare(v0, v0) ∨ ¬DoesNiceThings(v0, v0) ∨ evaluation(GOOD))	1	∀x(TakesCare(x) ∧ DoesNiceThings(x) → evaluation(GOOD))	1	∀x(TakesCare(x, x) ∧ DoesNiceThings(x, x) → evaluation(GOOD))	1				
101	it's okay to have doubts about your employers programs.																				evaluation(OK) | ~Employer(v2) | ~Program(v1) | ~HasDoubts(v2, v1)	1	(¬Employer(v2) ∨ ¬Program(v1) ∨ ¬HasDoubts(v2, v1) ∨ evaluation(OK))	1	∀x∀y(Employer(x,y) ∧ HasDoubtsAboutProgram(x,y) → evaluation(OK))	1	∀x∀y(Employer(y) ∧ Program(x) ∧ HasDoubts(y,x) → evaluation(OK))	1				
102	it's fun to hire a tour guide to learn about new places.																				evaluation(FUN) | ~TourGuide(v4) | ~Hires(v3, v4) | ~LearnsAboutNewPlaces(v3, v4)	1	(¬TourGuide(v4) ∨ ¬Hires(v3, v4) ∨ ¬LearnsAboutNewPlaces(v3, v4) ∨ evaluation(FUN))	1	∀x∀y(Hires(x,y) ∧ TourGuide(y) ∧ LearnsAboutNewPlaces(x) → evaluation(FUN))	1	∀x∀y(TourGuide(y) ∧ Hires(x,y) ∧ LearnsAboutNewPlaces(x,y) → evaluation(FUN))	1				
103	it's good to go out camping with your buddies.																				evaluation(GOOD) | ~Buddies(v5, v6) | ~GoCampingWith(v5, v6)	1	(¬Buddies(v5, v6) ∨ ¬GoCampingWith(v5, v6) ∨ evaluation(GOOD))	1	∀x∀y(GoCampingWith(x,y) ∧ Buddies(x,y) → evaluation(GOOD))	1	∀x∀y(Buddies(x,y) ∧ GoCampingWith(x,y) → evaluation(GOOD))	1				
104	people should date others based solely on their age.																				evaluation(GOOD) | ~People(v7) | ~People(v8) | ~Age(v8) | ~Date(v7, v8)	1	(¬People(v7) ∨ ¬People(v8) ∨ ¬Age(v8) ∨ ¬Date(v7, v8) ∨ evaluation(GOOD))	1	∀x∀y(People(x) ∧ DatesBasedOnAge(x, y) → evaluation(GOOD))	1	∀x∀y(People(x) ∧ People(y) ∧ Age(y) ∧ Date(x,y) → evaluation(GOOD))	1				
105	you should sleep around if you don't want an std.																				evaluation(GOOD) | ~People(v9) | ~SleepsAround(v9) | WantsSTD(v9)	1	NOT HORN	0	∀x((SleepsAround(x) ∧ ¬Wants(x, STD)) → evaluation(NOT_GOOD))	1	∀x((People(x) ∧ SleepsAround(x) ∧ ¬WantsSTD(x)) → evaluation(GOOD))	1				
106	you should not always get registration information when in an accident																				evaluation(GOOD) | ~Accident(v10, v11) | ~NotAlwaysGetRegistrationInfo(v10, v11)	1	(¬Accident(v10, v11) ∨ ¬NotAlwaysGetRegistrationInfo(v10, v11) ∨ evaluation(GOOD))	1	∀x∀y(InAccident(x, y) ∧ AlwaysGetRegistrationInfo(x, y) → evaluation(NOT_GOOD))	1	∀x∀y(Accident(x,y) ∧ NotAlwaysGetRegistrationInfo(x,y) → evaluation(GOOD))	1				
107	people should root for the success of their friends' relationships.																				evaluation(GOOD) | ~Friends(v12, v13) | ~Relationship(v13, v14) | ~RootForSuccess(v12, v14)	1	(¬Friends(v12, v13) ∨ ¬Relationship(v13, v14) ∨ ¬RootForSuccess(v12, v14) ∨ evaluation(GOOD))	1	∀x∀y(Friends(x,y) ∧ Relationships(y,z) ∧ RootsForSuccess(x,z) → evaluation(GOOD))	1	∀x∀y(Friends(x,y) ∧ Relationship(y,z) ∧ RootForSuccess(x,z) → evaluation(GOOD))	1				
108	getting circumcised isn't normal.																				evaluation(NOT_NORMAL) | ~GettingCircumcised(v15)	1	(¬GettingCircumcised(v15) ∨ evaluation(NOT_NORMAL))	1	∀x(GettingCircumcised(x) → evaluation(NOT_NORMAL))	1	∀x(GettingCircumcised(x) → evaluation(NOT_NORMAL))	1				
109	it's not ok to be frustrated when you work on amazon mechanical turk.																				evaluation(NOT_OK) | ~WorksOnAmazonMechanicalTurk(v16) | ~Frustrated(v16)	1	(¬WorksOnAmazonMechanicalTurk(v16) ∨ ¬Frustrated(v16) ∨ evaluation(NOT_OK))	1	∀x(WorksOn(x, AMAZONMECHANICALTURK) ∧ Frustrated(x) → evaluation(NOT_OK))	1	∀x((WorksOnAmazonMechanicalTurk(x) ∧ Frustrated(x)) → evaluation(NOT_OK))	1				
110	it's bad for your health scare to be averted.																				evaluation(NOT_BAD) | ~HealthScare(v17) | ~Averted(v17)	1	(¬HealthScare(v17) ∨ ¬Averted(v17) ∨ evaluation(NOT_BAD))	1	∀x(HealthScare(x) ∧ Averted(x) → evaluation(BAD))	1	∀x(HealthScare(x) ∧ Averted(x) → evaluation(NOT_BAD))	1				